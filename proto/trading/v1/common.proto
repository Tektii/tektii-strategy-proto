syntax = "proto3";

package trading.v1;

option go_package = "github.com/your-org/trading-interface-proto/gen/go/trading/v1;tradingv1";
option java_multiple_files = true;
option java_package = "com.yourorg.trading.v1";
option optimize_for = SPEED;

// No imports needed for common types

// Common enums used across the trading interface

// OrderStatus represents the current state of an order in its lifecycle.
enum OrderStatus {
    ORDER_STATUS_UNKNOWN = 0;
    ORDER_STATUS_PENDING = 1;      // Order has been received but not yet submitted to market
    ORDER_STATUS_SUBMITTED = 2;    // Order has been sent to the exchange
    ORDER_STATUS_ACCEPTED = 3;     // Order has been accepted by the exchange
    ORDER_STATUS_PARTIAL = 4;      // Order has been partially filled
    ORDER_STATUS_FILLED = 5;       // Order has been completely filled
    ORDER_STATUS_CANCELED = 6;     // Order has been canceled
    ORDER_STATUS_REJECTED = 7;     // Order has been rejected by broker/exchange
    ORDER_STATUS_EXPIRED = 8;      // Order has expired (e.g., DAY orders at market close)
}

// OrderSide indicates whether an order is to buy or sell.
enum OrderSide {
    ORDER_SIDE_UNKNOWN = 0;
    ORDER_SIDE_BUY = 1;
    ORDER_SIDE_SELL = 2;
}

// OrderType specifies how an order should be executed.
enum OrderType {
    ORDER_TYPE_UNKNOWN = 0;
    ORDER_TYPE_MARKET = 1;      // Execute immediately at current market price
    ORDER_TYPE_LIMIT = 2;       // Execute at specified price or better
    ORDER_TYPE_STOP = 3;        // Stop market order triggered at stop price
    ORDER_TYPE_STOP_LIMIT = 4;  // Stop order that becomes limit order when triggered
}

// OrderIntent indicates the purpose of an order for tracking and risk management.
enum OrderIntent {
    ORDER_INTENT_UNKNOWN = 0;
    ORDER_INTENT_OPEN = 1;        // Opening a new position
    ORDER_INTENT_CLOSE = 2;       // Closing an existing position
    ORDER_INTENT_STOP_LOSS = 3;   // Protective stop loss order
    ORDER_INTENT_TAKE_PROFIT = 4; // Take profit order
}

// TimeInForce specifies how long an order remains active.
enum TimeInForce {
    TIME_IN_FORCE_UNKNOWN = 0;
    TIME_IN_FORCE_DAY = 1;     // Valid for the current trading day
    TIME_IN_FORCE_GTC = 2;     // Good Till Canceled
    TIME_IN_FORCE_IOC = 3;     // Immediate Or Cancel
    TIME_IN_FORCE_FOK = 4;     // Fill Or Kill
}

// SystemEventType categorizes system-level events.
enum SystemEventType {
    SYSTEM_EVENT_UNKNOWN = 0;
    SYSTEM_EVENT_CONNECTED = 1;    // Connection established
    SYSTEM_EVENT_DISCONNECTED = 2; // Connection lost
    SYSTEM_EVENT_ERROR = 3;        // System error occurred
    SYSTEM_EVENT_WARNING = 4;      // Warning condition
    SYSTEM_EVENT_INFO = 5;         // Informational message
}

// RejectCode provides specific reasons for order rejections.
enum RejectCode {
    REJECT_CODE_UNKNOWN = 0;
    REJECT_CODE_INSUFFICIENT_MARGIN = 1;   // Not enough margin/buying power
    REJECT_CODE_POSITION_LIMIT = 2;        // Position limit exceeded
    REJECT_CODE_INVALID_SYMBOL = 3;        // Symbol not found or not tradeable
    REJECT_CODE_MARKET_CLOSED = 4;         // Market is closed
    REJECT_CODE_INVALID_QUANTITY = 5;      // Quantity invalid (e.g., too small)
    REJECT_CODE_INVALID_PRICE = 6;         // Price invalid (e.g., negative)
    REJECT_CODE_RATE_LIMIT = 7;            // Too many requests
    REJECT_CODE_DUPLICATE_ORDER = 8;       // Duplicate order ID
    REJECT_CODE_ACCOUNT_RESTRICTED = 9;    // Account trading restricted
    REJECT_CODE_ORDER_NOT_FOUND = 10;      // Order ID not found for modify/cancel
    REJECT_CODE_ORDER_NOT_MODIFIABLE = 11; // Order in state that can't be modified
    REJECT_CODE_RISK_CHECK_FAILED = 12;    // Pre-trade risk check failed
}

// ValidationErrorCode for pre-trade validation errors.
enum ValidationErrorCode {
    VALIDATION_ERROR_UNKNOWN = 0;
    VALIDATION_ERROR_INVALID_SYMBOL = 1;
    VALIDATION_ERROR_INVALID_QUANTITY = 2;
    VALIDATION_ERROR_INVALID_PRICE = 3;
    VALIDATION_ERROR_MISSING_REQUIRED_FIELD = 4;
    VALIDATION_ERROR_CONFLICTING_FIELDS = 5;
}

// ValidationWarningCode for non-blocking validation warnings.
enum ValidationWarningCode {
    VALIDATION_WARNING_UNKNOWN = 0;
    VALIDATION_WARNING_HIGH_CONCENTRATION = 1;  // Position concentration risk
    VALIDATION_WARNING_UNUSUAL_SIZE = 2;        // Unusually large order
    VALIDATION_WARNING_FAR_FROM_MARKET = 3;     // Price far from current market
    VALIDATION_WARNING_LOW_LIQUIDITY = 4;       // Low liquidity in symbol
    VALIDATION_WARNING_HIGH_VOLATILITY = 5;     // High volatility warning
}

// Common message types used across services

// Position represents a current position in a trading account.
message Position {
    string symbol = 1;
    double quantity = 2;          // Positive for long, negative for short
    double avg_price = 3;         // Average entry price
    double market_value = 4;      // Current market value
    double unrealized_pnl = 5;    // Unrealized profit/loss
    double realized_pnl = 6;      // Realized profit/loss
    double current_price = 7;     // Current market price
}

// Order represents a trading order.
message Order {
    string order_id = 1;
    string symbol = 2;
    OrderStatus status = 3;
    OrderSide side = 4;
    OrderType order_type = 5;
    double quantity = 6;
    double filled_quantity = 7;
    double limit_price = 8;
    double stop_price = 9;
    int64 created_at_us = 10;     // Microseconds since epoch
    OrderIntent order_intent = 11;
    string parent_trade_id = 12;  // For protective orders
}

// AccountState represents the current state of a trading account.
message AccountState {
    double cash_balance = 1;       // Available cash
    double portfolio_value = 2;    // Total portfolio value
    double buying_power = 3;       // Available buying power
    double initial_margin = 4;     // Initial margin requirement
    double maintenance_margin = 5; // Maintenance margin requirement
    double margin_used = 6;        // Currently used margin
    double daily_pnl = 7;          // Today's P&L
    double total_pnl = 8;          // Total P&L
}

// Bar represents OHLCV data for a time period.
message Bar {
    int64 timestamp_us = 1;  // Start of bar period
    double open = 2;
    double high = 3;
    double low = 4;
    double close = 5;
    int64 volume = 6;
    double vwap = 7;         // Volume-weighted average price
}

// PriceLevel represents a level in the order book.
message PriceLevel {
    double price = 1;
    double size = 2;
    int32 order_count = 3;   // Number of orders at this level
}

// ValidationError represents a validation error that prevents order placement.
message ValidationError {
    string field = 1;
    string message = 2;
    ValidationErrorCode code = 3;
}

// ValidationWarning represents a non-blocking validation warning.
message ValidationWarning {
    string field = 1;
    string message = 2;
    ValidationWarningCode code = 3;
}

// RiskCheckResult contains pre-trade risk analysis results.
message RiskCheckResult {
    double margin_required = 1;
    double margin_available = 2;
    double buying_power_used = 3;
    double buying_power_remaining = 4;
    
    // Position limits
    double position_limit = 5;
    double current_position = 6;
    double resulting_position = 7;
    
    // Risk metrics
    double portfolio_var_before = 8;   // Value at Risk before trade
    double portfolio_var_after = 9;    // Value at Risk after trade
    double concentration_risk = 10;    // Position concentration metric
    
    // Additional warnings that don't block the order
    map<string, string> warnings = 11;
}

// StopOrder configuration for stop market orders.
message StopOrder {
    double stop_price = 1;
}

// StopLimitOrder configuration for stop limit orders.
message StopLimitOrder {
    double stop_price = 1;
    double limit_price = 2;
}

// ProtectiveOrdersOnFill defines protective orders to create when an order fills.
message ProtectiveOrdersOnFill {
    // Stop loss order configuration
    oneof stop_loss {
        StopOrder stop = 1;
        StopLimitOrder stop_limit = 2;
    }
    
    // Take profit order (will create a LIMIT order)
    double take_profit_price = 3;
}

// PositionRisk contains risk metrics for a single position.
message PositionRisk {
    string symbol = 1;
    double position_var = 2;    // Position Value at Risk
    double beta = 3;            // Beta relative to market
    double volatility = 4;      // Historical volatility
    double exposure = 5;        // Dollar exposure
}