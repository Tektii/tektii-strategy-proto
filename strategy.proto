syntax = "proto3";

package tektii.strategy;

import "google/protobuf/wrappers.proto";

// TektiiStrategy service - implemented by trading strategies
service TektiiStrategy {
    // Process an event and return actions to take
    rpc ProcessEvent(TektiiEvent) returns (ActionResponse);

    // Initialize the strategy with configuration
    rpc Initialize(InitRequest) returns (InitResponse);

    // Graceful shutdown of the strategy
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);

    // Query methods for hybrid event-driven/pull-based approach
    // Get current state snapshot (positions, orders, account)
    rpc GetState(StateRequest) returns (StateResponse);

    // Get historical market data for analysis
    rpc GetHistoricalData(HistoricalDataRequest) returns (HistoricalDataResponse);

    // Get current market depth/order book
    rpc GetMarketDepth(MarketDepthRequest) returns (MarketDepthResponse);

    // Get portfolio risk metrics
    rpc GetRiskMetrics(RiskMetricsRequest) returns (RiskMetricsResponse);
}

// Base event wrapper that contains all possible event types
message TektiiEvent {
    // Unique event ID for tracking
    string event_id = 1;

    // Timestamp in microseconds since epoch
    int64 timestamp_us = 2;

    // The actual event - only one will be set
    oneof event {
        MarketDataEvent market_data = 10;
        OrderUpdateEvent order_update = 11;
        PositionUpdateEvent position_update = 12;
        AccountUpdateEvent account_update = 13;
        TradeEvent trade = 14;
        SystemEvent system = 15;
    }
}

// Market data update event
message MarketDataEvent {
    string symbol = 1;

    // Price information
    double bid = 2;
    double ask = 3;
    double last = 4;
    double mid = 5;

    // Volume information
    int64 bid_size = 6;
    int64 ask_size = 7;
    int64 last_size = 8;
    int64 volume = 9;

    // Additional market information
    double high = 10;
    double low = 11;
    double open = 12;
    double close = 13;
    double vwap = 14;

    // Options-specific data (optional)
    double implied_volatility = 20;
    double delta = 21;
    double gamma = 22;
    double theta = 23;
    double vega = 24;
    double rho = 25;
}

// Order update event
message OrderUpdateEvent {
    string order_id = 1;
    string symbol = 2;
    OrderStatus status = 3;
    OrderSide side = 4;
    OrderType order_type = 5;

    // Quantities
    double quantity = 6;
    double filled_quantity = 7;
    double remaining_quantity = 8;

    // Prices
    double limit_price = 9;
    double stop_price = 10;
    double avg_fill_price = 11;

    // Timestamps
    int64 created_at_us = 12;
    int64 updated_at_us = 13;

    // Additional information
    string reject_reason = 14;
    map<string, string> metadata = 15;
}

// Position update event
message PositionUpdateEvent {
    string symbol = 1;
    double quantity = 2;
    double avg_price = 3;

    // P&L information
    double unrealized_pnl = 4;
    double realized_pnl = 5;
    double market_value = 6;

    // Current market prices
    double current_price = 7;
    double bid = 8;
    double ask = 9;
}

// Account update event
message AccountUpdateEvent {
    // Balance information
    double cash_balance = 1;
    double portfolio_value = 2;
    double buying_power = 3;

    // Margin information
    double initial_margin = 4;
    double maintenance_margin = 5;
    double margin_used = 6;

    // P&L information
    double daily_pnl = 7;
    double total_pnl = 8;

    // Risk metrics
    double leverage = 9;
    map<string, double> risk_metrics = 10;
}

// Individual trade/execution event
message TradeEvent {
    string trade_id = 1;
    string order_id = 2;
    string symbol = 3;

    OrderSide side = 4;
    double quantity = 5;
    double price = 6;

    int64 timestamp_us = 7;

    // Fees and commissions
    double commission = 8;
    double fees = 9;
}

// System events (connection, errors, etc)
message SystemEvent {
    SystemEventType type = 1;
    string message = 2;
    map<string, string> details = 3;
}

// Action response wrapper
message ActionResponse {
    // Multiple actions can be returned
    repeated Action actions = 1;

    // Optional metadata for debugging
    map<string, string> metadata = 2;
}

// Individual action
message Action {
    oneof action {
        PlaceOrderAction place_order = 1;
        CancelOrderAction cancel_order = 2;
        ModifyOrderAction modify_order = 3;
        ClosePositionAction close_position = 4;
        LogAction log = 5;
        ModifyTradeProtectionAction modify_trade_protection = 6;
    }
}

// Place a new order
message PlaceOrderAction {
    string symbol = 1;
    OrderSide side = 2;
    OrderType order_type = 3;
    double quantity = 4;

    // Prices (depending on order type)
    double limit_price = 5;
    double stop_price = 6;

    // Time in force
    TimeInForce time_in_force = 7;

    // Optional metadata
    string client_order_id = 8;
    map<string, string> metadata = 9;

    // For opening orders: automatic stop loss and take profit creation
    // These orders will be created when the opening order fills
    double stop_loss_price_on_fill = 10;
    double take_profit_price_on_fill = 11;

    // For stop loss/take profit orders: link to specific trade
    // This allows creating SL/TP orders for existing trades
    string target_trade_id = 12;
}

// Cancel an existing order
message CancelOrderAction {
    string order_id = 1;
}

// Modify an existing order
message ModifyOrderAction {
    string order_id = 1;

    // Fields to modify (only set what needs to change)
    google.protobuf.DoubleValue quantity = 2;
    google.protobuf.DoubleValue limit_price = 3;
    google.protobuf.DoubleValue stop_price = 4;
}

// Close a position
message ClosePositionAction {
    string symbol = 1;
    double quantity = 2;  // 0 means close entire position
}

// Modify stop loss and/or take profit for an existing trade
message ModifyTradeProtectionAction {
    string trade_id = 1;
    
    // Use wrapper types to distinguish between "update to this value" vs "don't change"
    // If a field is not set, it won't be modified
    google.protobuf.DoubleValue stop_loss_price = 2;
    google.protobuf.DoubleValue take_profit_price = 3;
    
    // Set to true to remove the stop loss or take profit entirely
    bool remove_stop_loss = 4;
    bool remove_take_profit = 5;
}

// Log a message (for debugging/monitoring)
message LogAction {
    LogLevel level = 1;
    string message = 2;
    map<string, string> context = 3;
}

// Lifecycle messages
message InitRequest {
    map<string, string> config = 1;
    repeated string symbols = 2;
    string strategy_id = 3;
}

message InitResponse {
    bool success = 1;
    string message = 2;
    map<string, string> capabilities = 3;
}

message ShutdownRequest {
    string reason = 1;
    bool force = 2;
}

message ShutdownResponse {
    bool success = 1;
    string message = 2;
}

// Query Request/Response Messages for hybrid approach

// Request current state snapshot
message StateRequest {
    // Empty list means all symbols
    repeated string symbols = 1;
    
    // Control what to include in response
    bool include_positions = 2;
    bool include_orders = 3;
    bool include_account = 4;
}

// Current state snapshot response
message StateResponse {
    // Current positions by symbol
    map<string, Position> positions = 1;
    
    // Active orders by order_id
    map<string, Order> orders = 2;
    
    // Account state
    AccountState account = 3;
    
    // Timestamp of this snapshot
    int64 timestamp_us = 4;
}

// Position snapshot
message Position {
    string symbol = 1;
    double quantity = 2;
    double avg_price = 3;
    double market_value = 4;
    double unrealized_pnl = 5;
    double realized_pnl = 6;
    double current_price = 7;
}

// Order snapshot
message Order {
    string order_id = 1;
    string symbol = 2;
    OrderStatus status = 3;
    OrderSide side = 4;
    OrderType order_type = 5;
    double quantity = 6;
    double filled_quantity = 7;
    double limit_price = 8;
    double stop_price = 9;
    int64 created_at_us = 10;
}

// Account state snapshot
message AccountState {
    double cash_balance = 1;
    double portfolio_value = 2;
    double buying_power = 3;
    double initial_margin = 4;
    double maintenance_margin = 5;
    double margin_used = 6;
    double daily_pnl = 7;
    double total_pnl = 8;
}

// Historical data request
message HistoricalDataRequest {
    string symbol = 1;
    int64 start_timestamp_us = 2;
    int64 end_timestamp_us = 3;
    
    // Bar size: 1min, 5min, 15min, 30min, 1hour, 4hour, 1day
    string bar_size = 4;
    
    // Max number of bars to return
    int32 limit = 5;
}

// Historical data response
message HistoricalDataResponse {
    string symbol = 1;
    string bar_size = 2;
    repeated Bar bars = 3;
}

// OHLCV bar
message Bar {
    int64 timestamp_us = 1;
    double open = 2;
    double high = 3;
    double low = 4;
    double close = 5;
    int64 volume = 6;
    double vwap = 7;
}

// Market depth request
message MarketDepthRequest {
    string symbol = 1;
    int32 depth = 2;  // Number of levels, default 10
}

// Market depth response
message MarketDepthResponse {
    string symbol = 1;
    int64 timestamp_us = 2;
    repeated PriceLevel bids = 3;
    repeated PriceLevel asks = 4;
}

// Price level in order book
message PriceLevel {
    double price = 1;
    double size = 2;
    int32 order_count = 3;
}

// Risk metrics request
message RiskMetricsRequest {
    // Empty means calculate for all positions
    repeated string symbols = 1;
    
    // Risk calculation parameters
    double confidence_level = 2;  // e.g., 0.95 for 95% VaR
    int32 lookback_days = 3;      // Historical period for calculations
}

// Risk metrics response
message RiskMetricsResponse {
    // Portfolio-level metrics
    double portfolio_var = 1;      // Value at Risk
    double portfolio_sharpe = 2;   // Sharpe ratio
    double portfolio_beta = 3;     // Beta vs market
    double max_drawdown = 4;       // Maximum drawdown
    
    // Position-level metrics
    map<string, PositionRisk> position_risks = 5;
    
    // Correlation matrix (symbol pairs)
    map<string, double> correlations = 6;
    
    int64 timestamp_us = 7;
}

// Per-position risk metrics
message PositionRisk {
    string symbol = 1;
    double position_var = 2;
    double beta = 3;
    double volatility = 4;
    double exposure = 5;
}


// Enums
enum OrderStatus {
    ORDER_STATUS_UNKNOWN = 0;
    ORDER_STATUS_PENDING = 1;
    ORDER_STATUS_SUBMITTED = 2;
    ORDER_STATUS_ACCEPTED = 3;
    ORDER_STATUS_PARTIAL = 4;
    ORDER_STATUS_FILLED = 5;
    ORDER_STATUS_CANCELED = 6;
    ORDER_STATUS_REJECTED = 7;
    ORDER_STATUS_EXPIRED = 8;
}

enum OrderSide {
    ORDER_SIDE_UNKNOWN = 0;
    ORDER_SIDE_BUY = 1;
    ORDER_SIDE_SELL = 2;
}

enum OrderType {
    ORDER_TYPE_UNKNOWN = 0;
    ORDER_TYPE_MARKET = 1;
    ORDER_TYPE_LIMIT = 2;
    ORDER_TYPE_STOP = 3;
    ORDER_TYPE_STOP_LIMIT = 4;
}

enum TimeInForce {
    TIME_IN_FORCE_UNKNOWN = 0;
    TIME_IN_FORCE_DAY = 1;
    TIME_IN_FORCE_GTC = 2;
    TIME_IN_FORCE_IOC = 3;
    TIME_IN_FORCE_FOK = 4;
}

enum SystemEventType {
    SYSTEM_EVENT_UNKNOWN = 0;
    SYSTEM_EVENT_CONNECTED = 1;
    SYSTEM_EVENT_DISCONNECTED = 2;
    SYSTEM_EVENT_ERROR = 3;
    SYSTEM_EVENT_WARNING = 4;
    SYSTEM_EVENT_INFO = 5;
}

enum LogLevel {
    LOG_LEVEL_UNKNOWN = 0;
    LOG_LEVEL_DEBUG = 1;
    LOG_LEVEL_INFO = 2;
    LOG_LEVEL_WARN = 3;
    LOG_LEVEL_ERROR = 4;
}
