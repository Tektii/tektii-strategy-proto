syntax = "proto3";

package trading.v1.strategy;

// PreciseDecimal provides precision-safe decimal representation for financial calculations.
// This is critical for crypto (8+ decimals) and forex pip calculations.
message PreciseDecimal {
  // Scaled integer value
  int64 value = 1;
  // Number of decimal places
  int32 scale = 2;
  // Example: 1.23456 = {value: 123456, scale: 5}
}

// Candle represents OHLCV data for a time period.
message Candle {
  // Start of candle period in microseconds since epoch
  int64 timestamp_us = 1;
  // Opening price for the period
  PreciseDecimal open = 2;
  // Highest price during the period
  PreciseDecimal high = 3;
  // Lowest price during the period
  PreciseDecimal low = 4;
  // Closing price for the period
  PreciseDecimal close = 5;
  // Total volume traded during the period
  int64 volume = 6;
  // Volume-weighted average price
  PreciseDecimal vwap = 7;
}

// Position represents a current position in a trading account.
message Position {
  // Trading symbol identifier
  string symbol = 1;
  // Positive for long, negative for short
  PreciseDecimal quantity = 2;
  // Average entry price
  PreciseDecimal avg_price = 3;
  // Current market value
  PreciseDecimal market_value = 4;
  // Unrealized profit/loss
  PreciseDecimal unrealized_pnl = 5;
  // Realized profit/loss
  PreciseDecimal realized_pnl = 6;
  // Current market price
  PreciseDecimal current_price = 7;
}

// Order represents a trading order.
message Order {
  // Unique order identifier
  string order_id = 1;
  // Trading symbol identifier
  string symbol = 2;
  // Current order status
  OrderStatus status = 3;
  // Buy or sell side
  OrderSide side = 4;
  // Type of order (market, limit, etc.)
  OrderType order_type = 5;
  // Total order quantity
  PreciseDecimal quantity = 6;
  // Quantity already filled
  PreciseDecimal filled_quantity = 7;
  // Limit price for limit orders
  PreciseDecimal limit_price = 8;
  // Stop price for stop orders
  PreciseDecimal stop_price = 9;
  // Microseconds since epoch
  int64 created_at_us = 10;
  // For protective orders
  string parent_trade_id = 11;
}

// OrderStatus represents the current state of an order in its lifecycle.
enum OrderStatus {
  // Default unspecified order status
  ORDER_STATUS_UNSPECIFIED = 0;
  // Order has been received but not yet submitted to market
  ORDER_STATUS_PENDING = 1;
  // Order has been sent to the exchange
  ORDER_STATUS_SUBMITTED = 2;
  // Order has been accepted by the exchange
  ORDER_STATUS_ACCEPTED = 3;
  // Order has been partially filled
  ORDER_STATUS_PARTIAL = 4;
  // Order has been completely filled
  ORDER_STATUS_FILLED = 5;
  // Order has been canceled
  ORDER_STATUS_CANCELED = 6;
  // Order has been rejected by broker/exchange
  ORDER_STATUS_REJECTED = 7;
  // Order has expired (e.g., DAY orders at market close)
  ORDER_STATUS_EXPIRED = 8;
}

// OrderSide indicates whether an order is to buy or sell.
enum OrderSide {
  // Default unspecified side
  ORDER_SIDE_UNSPECIFIED = 0;
  // Buy order
  ORDER_SIDE_BUY = 1;
  // Sell order
  ORDER_SIDE_SELL = 2;
}

// OrderType specifies how an order should be executed.
enum OrderType {
  // Default unspecified order type
  ORDER_TYPE_UNSPECIFIED = 0;
  // Execute immediately at current market price
  ORDER_TYPE_MARKET = 1;
  // Execute at specified price or better
  ORDER_TYPE_LIMIT = 2;
  // Stop market order triggered at stop price
  ORDER_TYPE_STOP = 3;
  // Stop order that becomes limit order when triggered
  ORDER_TYPE_STOP_LIMIT = 4;
}
