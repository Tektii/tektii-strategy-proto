syntax = "proto3";

package tektii.strategy;

import "google/protobuf/wrappers.proto";

// TektiiStrategy service - implemented by trading strategies
service TektiiStrategy {
    // Process an event - strategies handle internally, no actions returned
    rpc ProcessEvent(TektiiEvent) returns (ProcessEventResponse);

    // Initialize the strategy with configuration
    rpc Initialize(InitRequest) returns (InitResponse);

    // Graceful shutdown of the strategy
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);

    // Query methods for hybrid event-driven/pull-based approach
    // Get current state snapshot (positions, orders, account)
    rpc GetState(StateRequest) returns (StateResponse);

    // Get historical market data for analysis
    rpc GetHistoricalData(HistoricalDataRequest) returns (HistoricalDataResponse);

    // Get current market depth/order book
    rpc GetMarketDepth(MarketDepthRequest) returns (MarketDepthResponse);

    // Get portfolio risk metrics
    rpc GetRiskMetrics(RiskMetricsRequest) returns (RiskMetricsResponse);

    // Synchronous order management methods
    // Place a new order with immediate confirmation/rejection
    rpc PlaceOrder(PlaceOrderRequest) returns (PlaceOrderResponse);

    // Cancel an existing order
    rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);

    // Modify an existing order
    rpc ModifyOrder(ModifyOrderRequest) returns (ModifyOrderResponse);

    // Perform pre-trade risk check without placing order
    rpc ValidateOrder(ValidateOrderRequest) returns (ValidateOrderResponse);

    // Close a position
    rpc ClosePosition(ClosePositionRequest) returns (ClosePositionResponse);

    // Modify stop loss and/or take profit for a trade
    rpc ModifyTradeProtection(ModifyTradeProtectionRequest) returns (ModifyTradeProtectionResponse);
}

// Base event wrapper that contains all possible event types
message TektiiEvent {
    // Unique event ID for tracking
    string event_id = 1;

    // Timestamp in microseconds since epoch
    int64 timestamp_us = 2;

    // The actual event - only one will be set
    oneof event {
        TickData tick_data = 10;
        BarData bar_data = 11;
        OptionGreeks option_greeks = 12;
        OrderUpdateEvent order_update = 13;
        PositionUpdateEvent position_update = 14;
        AccountUpdateEvent account_update = 15;
        TradeEvent trade = 16;
        SystemEvent system = 17;
    }
}

// High-frequency tick data (quotes and trades)
message TickData {
    string symbol = 1;
    
    // Quote data
    double bid = 2;
    double ask = 3;
    int64 bid_size = 4;
    int64 ask_size = 5;
    
    // Trade data
    double last = 6;
    int64 last_size = 7;
    
    // Derived
    double mid = 8;  // (bid + ask) / 2
    
    // Metadata
    string exchange = 9;
    enum TickType {
        TICK_TYPE_UNKNOWN = 0;
        TICK_TYPE_QUOTE = 1;
        TICK_TYPE_TRADE = 2;
        TICK_TYPE_QUOTE_AND_TRADE = 3;
    }
    TickType tick_type = 10;
}

// Aggregated OHLCV bar data
message BarData {
    string symbol = 1;
    
    // OHLCV
    double open = 2;
    double high = 3;
    double low = 4;
    double close = 5;
    int64 volume = 6;
    
    // Additional aggregates
    double vwap = 7;
    int64 trade_count = 8;
    
    // Bar metadata
    enum BarType {
        BAR_TYPE_UNKNOWN = 0;
        BAR_TYPE_TIME = 1;     // 1min, 5min, etc.
        BAR_TYPE_TICK = 2;     // Every N ticks
        BAR_TYPE_VOLUME = 3;   // Every N shares
        BAR_TYPE_DOLLAR = 4;   // Every $N traded
    }
    BarType bar_type = 9;
    int32 bar_size = 10;  // e.g., 1 for 1min, 5 for 5min
    string bar_size_unit = 11;  // e.g., "min", "hour", "day"
}

// Options Greeks and derivatives analytics
message OptionGreeks {
    string symbol = 1;
    
    // Greeks
    double delta = 2;
    double gamma = 3;
    double theta = 4;
    double vega = 5;
    double rho = 6;
    
    // Additional option metrics
    double implied_volatility = 7;
    double theoretical_value = 8;
    
    // Context (important for Greeks interpretation)
    double underlying_price = 9;
    double interest_rate = 10;
    int32 days_to_expiry = 11;
}

// Order update event
message OrderUpdateEvent {
    string order_id = 1;
    string symbol = 2;
    OrderStatus status = 3;
    OrderSide side = 4;
    OrderType order_type = 5;

    // Quantities
    double quantity = 6;
    double filled_quantity = 7;
    double remaining_quantity = 8;

    // Prices
    double limit_price = 9;
    double stop_price = 10;
    double avg_fill_price = 11;

    // Timestamps
    int64 created_at_us = 12;
    int64 updated_at_us = 13;

    // Additional information
    string reject_reason = 14;
    map<string, string> metadata = 15;
}

// Position update event
message PositionUpdateEvent {
    string symbol = 1;
    double quantity = 2;
    double avg_price = 3;

    // P&L information
    double unrealized_pnl = 4;
    double realized_pnl = 5;
    double market_value = 6;

    // Current market prices
    double current_price = 7;
    double bid = 8;
    double ask = 9;
}

// Account update event
message AccountUpdateEvent {
    // Balance information
    double cash_balance = 1;
    double portfolio_value = 2;
    double buying_power = 3;

    // Margin information
    double initial_margin = 4;
    double maintenance_margin = 5;
    double margin_used = 6;

    // P&L information
    double daily_pnl = 7;
    double total_pnl = 8;

    // Risk metrics
    double leverage = 9;
    map<string, double> risk_metrics = 10;
}

// Individual trade/execution event
message TradeEvent {
    string trade_id = 1;
    string order_id = 2;
    string symbol = 3;

    OrderSide side = 4;
    double quantity = 5;
    double price = 6;

    int64 timestamp_us = 7;

    // Fees and commissions
    double commission = 8;
    double fees = 9;
}

// System events (connection, errors, etc)
message SystemEvent {
    SystemEventType type = 1;
    string message = 2;
    map<string, string> details = 3;
}

// Process event response - simple acknowledgment
message ProcessEventResponse {
    // Indicates if the event was processed successfully
    bool success = 1;
    
    // Optional error message if processing failed
    string error = 2;
    
    // Optional metadata for debugging
    map<string, string> metadata = 3;
}

// Lifecycle messages
message InitRequest {
    map<string, string> config = 1;
    repeated string symbols = 2;
    string strategy_id = 3;
}

message InitResponse {
    bool success = 1;
    string message = 2;
    map<string, string> capabilities = 3;
}

message ShutdownRequest {
    string reason = 1;
    bool force = 2;
}

message ShutdownResponse {
    bool success = 1;
    string message = 2;
}

// Query Request/Response Messages for hybrid approach

// Request current state snapshot
message StateRequest {
    // Empty list means all symbols
    repeated string symbols = 1;
    
    // Control what to include in response
    bool include_positions = 2;
    bool include_orders = 3;
    bool include_account = 4;
}

// Current state snapshot response
message StateResponse {
    // Current positions by symbol
    map<string, Position> positions = 1;
    
    // Active orders by order_id
    map<string, Order> orders = 2;
    
    // Account state
    AccountState account = 3;
    
    // Timestamp of this snapshot
    int64 timestamp_us = 4;
}

// Position snapshot
message Position {
    string symbol = 1;
    double quantity = 2;
    double avg_price = 3;
    double market_value = 4;
    double unrealized_pnl = 5;
    double realized_pnl = 6;
    double current_price = 7;
}

// Order snapshot
message Order {
    string order_id = 1;
    string symbol = 2;
    OrderStatus status = 3;
    OrderSide side = 4;
    OrderType order_type = 5;
    double quantity = 6;
    double filled_quantity = 7;
    double limit_price = 8;
    double stop_price = 9;
    int64 created_at_us = 10;
    OrderIntent order_intent = 11;
    string parent_trade_id = 12;  // For protective orders
}

// Account state snapshot
message AccountState {
    double cash_balance = 1;
    double portfolio_value = 2;
    double buying_power = 3;
    double initial_margin = 4;
    double maintenance_margin = 5;
    double margin_used = 6;
    double daily_pnl = 7;
    double total_pnl = 8;
}

// Historical data request
message HistoricalDataRequest {
    string symbol = 1;
    int64 start_timestamp_us = 2;
    int64 end_timestamp_us = 3;
    
    // Bar size: 1min, 5min, 15min, 30min, 1hour, 4hour, 1day
    string bar_size = 4;
    
    // Max number of bars to return
    int32 limit = 5;
}

// Historical data response
message HistoricalDataResponse {
    string symbol = 1;
    string bar_size = 2;
    repeated Bar bars = 3;
}

// OHLCV bar
message Bar {
    int64 timestamp_us = 1;
    double open = 2;
    double high = 3;
    double low = 4;
    double close = 5;
    int64 volume = 6;
    double vwap = 7;
}

// Market depth request
message MarketDepthRequest {
    string symbol = 1;
    int32 depth = 2;  // Number of levels, default 10
}

// Market depth response
message MarketDepthResponse {
    string symbol = 1;
    int64 timestamp_us = 2;
    repeated PriceLevel bids = 3;
    repeated PriceLevel asks = 4;
}

// Price level in order book
message PriceLevel {
    double price = 1;
    double size = 2;
    int32 order_count = 3;
}

// Risk metrics request
message RiskMetricsRequest {
    // Empty means calculate for all positions
    repeated string symbols = 1;
    
    // Risk calculation parameters
    double confidence_level = 2;  // e.g., 0.95 for 95% VaR
    int32 lookback_days = 3;      // Historical period for calculations
}

// Risk metrics response
message RiskMetricsResponse {
    // Portfolio-level metrics
    double portfolio_var = 1;      // Value at Risk
    double portfolio_sharpe = 2;   // Sharpe ratio
    double portfolio_beta = 3;     // Beta vs market
    double max_drawdown = 4;       // Maximum drawdown
    
    // Position-level metrics
    map<string, PositionRisk> position_risks = 5;
    
    // Correlation matrix (symbol pairs)
    map<string, double> correlations = 6;
    
    int64 timestamp_us = 7;
}

// Per-position risk metrics
message PositionRisk {
    string symbol = 1;
    double position_var = 2;
    double beta = 3;
    double volatility = 4;
    double exposure = 5;
}

// Stop order configuration
message StopOrder {
    double stop_price = 1;
}

// Stop-limit order configuration
message StopLimitOrder {
    double stop_price = 1;
    double limit_price = 2;
}


// Enums
enum OrderStatus {
    ORDER_STATUS_UNKNOWN = 0;
    ORDER_STATUS_PENDING = 1;
    ORDER_STATUS_SUBMITTED = 2;
    ORDER_STATUS_ACCEPTED = 3;
    ORDER_STATUS_PARTIAL = 4;
    ORDER_STATUS_FILLED = 5;
    ORDER_STATUS_CANCELED = 6;
    ORDER_STATUS_REJECTED = 7;
    ORDER_STATUS_EXPIRED = 8;
}

enum OrderSide {
    ORDER_SIDE_UNKNOWN = 0;
    ORDER_SIDE_BUY = 1;
    ORDER_SIDE_SELL = 2;
}

enum OrderType {
    ORDER_TYPE_UNKNOWN = 0;
    ORDER_TYPE_MARKET = 1;
    ORDER_TYPE_LIMIT = 2;
    ORDER_TYPE_STOP = 3;
    ORDER_TYPE_STOP_LIMIT = 4;
}

enum OrderIntent {
    ORDER_INTENT_UNKNOWN = 0;
    ORDER_INTENT_OPEN = 1;       // Opening a new position
    ORDER_INTENT_CLOSE = 2;      // Closing a position
    ORDER_INTENT_STOP_LOSS = 3;  // Protective stop loss
    ORDER_INTENT_TAKE_PROFIT = 4; // Protective take profit
}

enum TimeInForce {
    TIME_IN_FORCE_UNKNOWN = 0;
    TIME_IN_FORCE_DAY = 1;
    TIME_IN_FORCE_GTC = 2;
    TIME_IN_FORCE_IOC = 3;
    TIME_IN_FORCE_FOK = 4;
}

enum SystemEventType {
    SYSTEM_EVENT_UNKNOWN = 0;
    SYSTEM_EVENT_CONNECTED = 1;
    SYSTEM_EVENT_DISCONNECTED = 2;
    SYSTEM_EVENT_ERROR = 3;
    SYSTEM_EVENT_WARNING = 4;
    SYSTEM_EVENT_INFO = 5;
}


// Synchronous Order Management Messages

// Protective orders to create when an opening order fills
message ProtectiveOrdersOnFill {
    // Stop loss order configuration
    oneof stop_loss {
        StopOrder stop = 1;
        StopLimitOrder stop_limit = 2;
    }
    
    // Take profit order details (will create a LIMIT order)
    double take_profit_price = 3;
}

// Place order request - with synchronous confirmation
message PlaceOrderRequest {
    string symbol = 1;
    OrderSide side = 2;
    OrderType order_type = 3;
    double quantity = 4;

    // Prices (depending on order type)
    double limit_price = 5;
    double stop_price = 6;

    // Time in force
    TimeInForce time_in_force = 7;

    // Optional metadata
    string client_order_id = 8;
    map<string, string> metadata = 9;

    // Order intent/purpose
    OrderIntent order_intent = 10;
    
    // For protective orders, link to the trade they protect
    string parent_trade_id = 11;
    
    // Automatic protective order creation on fill
    ProtectiveOrdersOnFill protective_orders_on_fill = 12;

    // Request metadata
    string request_id = 20;  // Client correlation ID
    bool validate_only = 21; // Dry run for pre-trade checks
}

// Place order response with immediate feedback
message PlaceOrderResponse {
    bool accepted = 1;
    string order_id = 2;        // Provider-assigned ID
    string request_id = 3;      // Echo back for correlation
    
    // Rejection details
    string reject_reason = 4;
    RejectCode reject_code = 5;
    
    // Pre-trade risk check results
    RiskCheckResult risk_check = 6;
    
    // Estimated execution metrics
    double estimated_fill_price = 7;
    double estimated_commission = 8;
    
    // Timestamp of acceptance/rejection
    int64 timestamp_us = 9;
}

// Cancel order request
message CancelOrderRequest {
    string order_id = 1;
    string request_id = 2;  // Client correlation ID
}

// Cancel order response
message CancelOrderResponse {
    bool accepted = 1;
    string order_id = 2;
    string request_id = 3;
    
    // If cancel was rejected
    string reject_reason = 4;
    RejectCode reject_code = 5;
    
    // State at time of cancel
    OrderStatus previous_status = 6;
    double filled_quantity = 7;
    
    int64 timestamp_us = 8;
}

// Modify order request
message ModifyOrderRequest {
    string order_id = 1;

    // Fields to modify (only set what needs to change)
    google.protobuf.DoubleValue quantity = 2;
    google.protobuf.DoubleValue limit_price = 3;
    google.protobuf.DoubleValue stop_price = 4;
    
    string request_id = 5;  // Client correlation ID
}

// Modify order response
message ModifyOrderResponse {
    bool accepted = 1;
    string order_id = 2;
    string request_id = 3;
    
    // If modify was rejected
    string reject_reason = 4;
    RejectCode reject_code = 5;
    
    // New risk metrics after modification
    RiskCheckResult risk_check = 6;
    
    int64 timestamp_us = 7;
}

// Validate order request (pre-trade check without placing)
message ValidateOrderRequest {
    // Same fields as PlaceOrderRequest minus the execution flags
    string symbol = 1;
    OrderSide side = 2;
    OrderType order_type = 3;
    double quantity = 4;
    double limit_price = 5;
    double stop_price = 6;
    
    string request_id = 7;
}

// Validate order response
message ValidateOrderResponse {
    bool valid = 1;
    string request_id = 2;
    
    // Validation results
    repeated ValidationError errors = 3;
    repeated ValidationWarning warnings = 4;
    
    // Risk metrics if validation passed
    RiskCheckResult risk_check = 5;
    
    // Market impact estimates
    double estimated_fill_price = 6;
    double estimated_market_impact = 7;
}

// Risk check results
message RiskCheckResult {
    double margin_required = 1;
    double margin_available = 2;
    double buying_power_used = 3;
    double buying_power_remaining = 4;
    
    // Position limits
    double position_limit = 5;
    double current_position = 6;
    double resulting_position = 7;
    
    // Risk metrics
    double portfolio_var_before = 8;
    double portfolio_var_after = 9;
    double concentration_risk = 10;
    
    // Warnings that don't block the order
    map<string, string> warnings = 11;
}

// Validation error
message ValidationError {
    string field = 1;
    string message = 2;
    ValidationErrorCode code = 3;
}

// Validation warning
message ValidationWarning {
    string field = 1;
    string message = 2;
    ValidationWarningCode code = 3;
}

// Rejection codes for order operations
enum RejectCode {
    REJECT_CODE_UNKNOWN = 0;
    REJECT_CODE_INSUFFICIENT_MARGIN = 1;
    REJECT_CODE_POSITION_LIMIT = 2;
    REJECT_CODE_INVALID_SYMBOL = 3;
    REJECT_CODE_MARKET_CLOSED = 4;
    REJECT_CODE_INVALID_QUANTITY = 5;
    REJECT_CODE_INVALID_PRICE = 6;
    REJECT_CODE_RATE_LIMIT = 7;
    REJECT_CODE_DUPLICATE_ORDER = 8;
    REJECT_CODE_ACCOUNT_RESTRICTED = 9;
    REJECT_CODE_ORDER_NOT_FOUND = 10;
    REJECT_CODE_ORDER_NOT_MODIFIABLE = 11;
    REJECT_CODE_RISK_CHECK_FAILED = 12;
}

// Validation error codes
enum ValidationErrorCode {
    VALIDATION_ERROR_UNKNOWN = 0;
    VALIDATION_ERROR_INVALID_SYMBOL = 1;
    VALIDATION_ERROR_INVALID_QUANTITY = 2;
    VALIDATION_ERROR_INVALID_PRICE = 3;
    VALIDATION_ERROR_MISSING_REQUIRED_FIELD = 4;
    VALIDATION_ERROR_CONFLICTING_FIELDS = 5;
}

// Validation warning codes
enum ValidationWarningCode {
    VALIDATION_WARNING_UNKNOWN = 0;
    VALIDATION_WARNING_HIGH_CONCENTRATION = 1;
    VALIDATION_WARNING_UNUSUAL_SIZE = 2;
    VALIDATION_WARNING_FAR_FROM_MARKET = 3;
    VALIDATION_WARNING_LOW_LIQUIDITY = 4;
    VALIDATION_WARNING_HIGH_VOLATILITY = 5;
}

// Close position request
message ClosePositionRequest {
    string symbol = 1;
    double quantity = 2;  // 0 or omitted means close entire position
    
    // Order routing preferences
    OrderType order_type = 3;  // Default MARKET
    double limit_price = 4;    // For LIMIT orders
    
    string request_id = 5;
}

// Close position response
message ClosePositionResponse {
    bool accepted = 1;
    string request_id = 2;
    
    // Created order IDs (may be multiple for complex positions)
    repeated string order_ids = 3;
    
    // Position details
    double position_quantity = 4;
    double closing_quantity = 5;
    double remaining_quantity = 6;
    
    // Rejection details if not accepted
    string reject_reason = 7;
    RejectCode reject_code = 8;
    
    int64 timestamp_us = 9;
}

// Modify trade protection request
message ModifyTradeProtectionRequest {
    string trade_id = 1;
    
    // Stop loss modifications
    message StopLossModification {
        oneof modification {
            StopOrder stop = 1;
            StopLimitOrder stop_limit = 2;
            bool remove = 3;  // Set to true to remove stop loss
        }
    }
    StopLossModification stop_loss = 2;
    
    // Take profit modifications
    message TakeProfitModification {
        oneof modification {
            double limit_price = 1;  // New take profit price
            bool remove = 2;         // Set to true to remove take profit
        }
    }
    TakeProfitModification take_profit = 3;
    
    string request_id = 4;
}

// Modify trade protection response
message ModifyTradeProtectionResponse {
    bool accepted = 1;
    string trade_id = 2;
    string request_id = 3;
    
    // Updated order IDs
    string stop_loss_order_id = 4;
    string take_profit_order_id = 5;
    
    // Current trade details
    double trade_quantity = 6;
    double trade_entry_price = 7;
    double current_price = 8;
    
    // Risk metrics after modification
    double max_loss = 9;    // Based on stop loss
    double max_profit = 10; // Based on take profit
    
    // Rejection details if not accepted
    string reject_reason = 11;
    RejectCode reject_code = 12;
    
    int64 timestamp_us = 13;
}
