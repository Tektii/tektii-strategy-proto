syntax = "proto3";

package strategy.v1;

import "strategy/v1/event_account_update.proto";
import "strategy/v1/event_candle_data.proto";
import "strategy/v1/event_option_greeks.proto";
import "strategy/v1/event_order_update.proto";
import "strategy/v1/event_position_update.proto";
import "strategy/v1/event_system_update.proto";
import "strategy/v1/event_tick_data.proto";
import "strategy/v1/event_trade_update.proto";
import "strategy/v1/strategy_common.proto";

// ProcessEventRequest is the base event wrapper containing all possible event types.
// Only one event type will be set per message to ensure type safety.
message ProcessEventRequest {
  // Unique event ID for tracking
  // Unique identifier for this event
  string event_id = 1;

  // Timestamp in microseconds since epoch
  // Event timestamp in microseconds since epoch
  int64 timestamp_us = 2;

  // Broker source of this event (e.g., "alpaca", "interactive_brokers")
  Broker broker = 3;

  // Event payload - exactly one field will be set per message
  oneof event {
    // Market data events (10-99)
    // High-frequency quote and trade data
    TickData tick_data = 10;
    // Aggregated OHLCV data
    CandleData candle_data = 11;
    // Options pricing and risk metrics
    OptionGreeks option_greeks = 12;

    // Trading events (100-199)
    // Order status changes
    OrderUpdateEvent order_update = 100;
    // Position changes
    PositionUpdateEvent position_update = 101;
    // Account balance changes
    AccountUpdateEvent account_update = 102;
    // Trade state updates
    TradeUpdateEvent trade_update = 103;

    // System events (200-299)
    // System-level notifications
    SystemEvent system = 200;
  }
}

// ProcessEventResponse acknowledges event processing.
message ProcessEventResponse {
  // Whether event was processed successfully
  bool success = 1;
  // Error message if processing failed
  string error = 2;
  // Optional metadata about event processing
  map<string, string> metadata = 3;
}
